Pycante {
  Program        = Statement*
  Statement      = Assignment
                 | increment Exp7    -- inc
                 | decrement Exp7    -- dec
                 | FunctionCall
                 | Declaration
                 | PrintStatement
                 | Loop
                 | IfStatement
  Declaration    = VarDec
                 | FuncDec
                 | ClassDec

  VarDec         = "let" id "=" Exp
  FuncDec        = "üå∂" id "(" Params ")" Type Statement* Return "end"
  ClassDec       = "‚ô®Ô∏è" id VarDec* FuncDec* "end"
  Params         = ListOf<Param, ",">
  Param          = id ":" Type

  Exp            = Exp "or" Exp1           -- or
                 | Exp1
  Exp1           = Exp1 "and" Exp2         -- and
                 | Exp2
  Exp2           = Exp2 relop Exp3         -- binary
                 | Exp3
  Exp3           = Exp3 addop Exp4         -- binary
                 | Exp4
  Exp4           = Exp4 mulop Exp5         -- binary
                 | Exp5
  Exp5           = Exp5 "**" Exp6          -- binary
                 | Exp6
  Exp6           = increment Exp7          -- inc
                 | decrement Exp7          -- dec
                 | Exp7
  Exp7           = Exp7 "." FunctionCall   -- methodCall
                 | Exp7 "[" Exp "]"        -- subscripted
                 | NumberLiteral
                 | StringLiteral
                 | BoolLiteral
                 | FunctionCall
                 | id                      -- id
                 | List
                 | Dictionary
                 | WhatExp
                 | "(" Exp ")"             -- parens
  Exps           = Exp ("," Exp)*

  Type           = "Boolean" | "Number" | "String"
  keyword        = ("let" | "‚ô®Ô∏è" | "üå∂" | "for" | "while" | "return" | "end" | "if"
                 | "else" | "else if" | "what" | "true" | "false" | "print") ~idrest
  FunctionCall   = id "(" Exps? ")"

  Assignment     = id "=" Exp

  Return         = "return" Exp         -- returnExpression
                 | "return"             -- returnNothing
                 | Exp                  -- implicitReturnExpression
  WhatExp        = "what" "(" Exp ")"
  List           = "[" ListOf<Exp, ","> "]"

  Dictionary     = DictTerm ("," DictTerm)* "."
  DictTerm       = id ":" Exp

  Loop           = ForStatement | WhileStatement

  ForStatement   = "for" "(" VarDec ";" Exp ";" Exp ")" Statement* "end"
  WhileStatement = "while" Test Statement* "end"
  IfStatement    = "if" Test Statement* ("else if" Test Statement*)* ("else" Statement*)? "end"
  PrintStatement = "print:" (StringLiteral | Exp)
  Test           = "(" Exp ")"

  NumberLiteral  = digit+
  StringLiteral  = "\"" (~"\""any)* "\""
  BoolLiteral    = "false" | "true"

  addop          = "+" | "-"
  mulop          = "*"| "%" | "/" | "//"
  relop          = "<=" | ">=" | ">" | "<" | "==" | "!="
  increment      = "++"
  decrement      = "--"

  id             = ~keyword ("_" | lower) idrest*
  idrest         =  "_" | alnum

  newline        =  "\n"+
  space         :=  " " | "\t" | "\n" | comment
  comment        = "~" (~"\n" any)*  -- comment
                 | multiLineComment
  multiLineComment = "|-" (~"-|" any)* "-|" -- multiLineComment
}
