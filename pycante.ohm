Pycante {
  Program   = Statement*
  Statement = Exp
            | VarDec
            | Declaration
            | Assignment
            | PrintStatement

  Declaration  = Declaration1 "end"
  Declaration1 = FunDeclaration
               | Loop
               | Conditional
               | Class

  VarDec = "let" id "=" Exp
  FunDeclaration = "üå∂" id "(" (Param ("," Param)*)? ")" Statement* Return
  Param = id ":" Type

  Exp  = Exp "or" Exp1       -- binary
       | Exp1
  Exp1 = Exp1 "and" Exp2     -- binary
       | Exp2
  Exp2 = Exp3 relop Exp3     -- binary
       | Exp3
  Exp3 = Exp3 mulop Exp4     -- binary
       | Exp4
  Exp4 = Exp4 addop Exp5     -- binary
       | Exp5
  Exp5 = Exp6 "**" Exp5      -- binary
       | Exp6
  Exp6 = plusplus Exp7       -- inc
       | decrement Exp7      -- dec
       | Exp7
  Exp7 = numberLiteral
       | stringLiteral
       | boolLiteral
       | id
       | FunCall
       | List
       | WhatExp
       | "(" Exp ")"         -- parens
       | Exp7 "." FunCall    -- methodCall

  Type  =  "Boolean" | "Number" | "String"

  keyword =  ("let" | "for" | "while" | "while" |  "return"  | "if" | "else" | "else if" | "what" | "true" | "false") ~idrest

  FunCall = id "(" (Exp ("," Exp)* )?")"
  Assignment = id "=" Exp
  Class = "‚ô®Ô∏è" id newline VarDec* FunDeclaration*

  Return = "return" Exp         -- returnExpression
         | "return"             -- returnNothing
         | Exp                  -- implicitReturnExpression
  WhatExp = "what"  Exp
  List = "[" ListOf<Exp, ","> "]"

  Conditional = IfStatement
  Loop = ForStatement | WhileStatement

  ForStatement = "for" "(" VarDec ";" Exp ";" Exp ")" Statement*
  WhileStatement = "while" Exp Statement*
  IfStatement = "if" Exp  Statement* ("else" Statement*)?
  PrintStatement = "üî•" ":" Exp

  numberLiteral = digit+
  stringLiteral = "\"" (~"\""any)* "\""
  boolLiteral = "false" | "true"

  addop   = "+" | "-"
  mulop   = "*"| "%" | "/"
  relop   = "<=" | ">=" | ">" | "<" | "==" | "!="
  plusplus = "++"
  decrement = "--"

  id = ~keyword ("_" | lower) idrest*
  idrest =  "_" | alnum

  newline     =  "\n"+
  space      :=  " " | "\t" | "\n" | comment
  comment     = "~" (~"\n" any)*  -- comment
              | multiLineComment
  multiLineComment   = "|-" (~"-|" any)* "-|"
}
