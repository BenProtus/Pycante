Pycante {
  Program     = Statement*
  Statement   = Assignment
              | increment Exp7    -- inc
              | decrement Exp7    -- dec
              | FunctionCall
              | ListCall
              | Declaration
              | PrintStatement
              | Loop
              | IfStatement
  Declaration = VarDec
              | FunDeclaration
              | ClassDec

  VarDec         = "let" id "=" Exp
  FunDeclaration = "üå∂" id "(" Params? ")" Type Statement* Return "end"
  Params         = Param ("," Param)*
  Param          = id ":" Type

  Exp  = Exp "or" Exp1       -- or
       | Exp1
  Exp1 = Exp1 "and" Exp2     -- and
       | Exp2
  Exp2 = Exp2 relop Exp3     -- binary
       | Exp3
  Exp3 = Exp3 addop Exp4     -- binary
       | Exp4
  Exp4 = Exp4 mulop Exp5     -- binary
       | Exp5
  Exp5 = Exp5 "**" Exp6      -- binary
       | Exp6
  Exp6 = increment Exp7      -- inc
       | decrement Exp7      -- dec
       | Exp7
  Exp7 = NumberLiteral
       | StringLiteral
       | BoolLiteral
       | id
       | FunctionCall
       | List
       | Dictionary
       | WhatExp
       | "(" Exp ")"         -- parens
       | Exp7 "." FunctionCall    -- methodCall
  Exps = Exp ("," Exp)*

  Type  =  "Boolean" | "Number" | "String"

  keyword =  ("let" | "‚ô®Ô∏è" | "üå∂" | "for" | "while" |  "return" | "end" | "if" | "else" | "else if" | "what" | "true" | "false" | "print") ~idrest

  FunctionCall = id "(" Exps? ")"

  Assignment = id "=" Exp
  ClassDec = "‚ô®Ô∏è" id VarDec* FunDeclaration* "end"

  Return = "return" Exp         -- returnExpression
         | "return"             -- returnNothing
         | Exp                  -- implicitReturnExpression
  WhatExp = "what" Exp
  List = "[" ListOf<Exp, ","> "]"
  ListCall = "[" Exp "]"

  Dictionary = DictTerm DictTerms* "."
  DictTerm   = id ":" Exp
  DictTerms  = "," id ":" Exp

  Loop = ForStatement | WhileStatement

  ForStatement   = "for" ForBlock Statement* "end"
  ForBlock       = "(" (VarDec | Assignment) ";" Exp3 relop Exp3 ";" Exp ")"
  WhileStatement = "while" Test Statement* "end"
  IfStatement    = "if" Test Statement* ("else if" Test Statement*)* ("else" Statement*)? "end"
  PrintStatement = "print" ":" Exp
  Test           = "(" Exp3 relop Exp3 ")"

  NumberLiteral  = digit+
  StringLiteral  = "\"" (~"\""any)* "\""
  BoolLiteral    = "false" | "true"

  addop   = "+" | "-"
  mulop   = "*"| "%" | "/" | "//"
  relop   = "<=" | ">=" | ">" | "<" | "==" | "!="
  increment = "++"
  decrement = "--"

  id = ~keyword ("_" | lower) idrest*
  idrest =  "_" | alnum

  newline     =  "\n"+
  space      :=  " " | "\t" | "\n" | comment
  comment     = "~" (~"\n" any)*  -- comment
              | multiLineComment
  multiLineComment   = "|-" (~"-|" any)* "-|" -- multiLineComment
}
