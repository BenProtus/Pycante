Pycante {
  Program = Statement*
  Statement = Exp
            | VarDec
            | numberLiteral
            | boolLiteral
            | stringLiteral



  Exp = Exp mulop Exp1    -- binary
       | Exp1
  Exp1 = Exp1 addop Exp2    -- binary
       | Exp2
  Exp2 = Exp2 "**" Exp3    -- binary
       | Exp3
  Exp3 = Exp3 relop Exp4    -- binary
       | Exp4
  Exp4 = Exp4 booleanp Exp5    -- binary
       | Exp5
  Exp5 = plusplus Exp    -- binary
        | Exp6
  Exp6   = numberLiteral
        | stringLiteral
        | boolLiteral
        | id
        | FunCall
        | Loop
        | Conditional
        | FunDeclaration
        | Assignment
        | List
        | TypeInference
        | "(" Exp ")"        -- parens

VarDec = "let" id "=" Exp

Types  =  "Boolean" | "Number" | "String"
keyword =  ("let" | "for" | "while" | "while" |  "return"  | "if" | "what" | "else" | "else if" | "what" | "true" | "false") ~idrest
FunCall = id "(" (Exp ("," Exp)* )?")"
FunDeclaration = "ðŸŒ¶" id "(" (id ("," id)*)? ")" Statement* Return
Assignment = id ass Exp
Class = "class" id newline VarDec* FunDeclaration*
Return = "return"? Exp?
TypeInference = "what"  Exp 

List = "[" ListOf<numberLiteral, ","> "]"
      | "[" ListOf<stringLiteral, ","> "]"
      | "[" ListOf<boolLiteral, ","> "]"
Conditional = IF
Loop = For | While

For = "for" "(" VarDec ";" Exp ";" Exp ")"
While = "while" Exp
IF = "if"  Exp  Statement* "else"? Statement*

addop   = "+" | "-"
numberLiteral = digit+
stringLiteral = "\"" (~"\""any)* "\""
booleanp = "&" |  "|"
mulop   = "*"| "%" | "/"
relop   = "<=" | ">=" | ">" | "<" | "==" | "!="
plusplus = "++"
boolLiteral = "false" | "true"
decrement = "--"
id = ~keyword ("_" | lower) idrest*
idrest =  "_" | alnum
ass = "="
newline     =  "\n"+
space      :=  " " | "\t" | "\n" | comment
comment     = "~" (~"\n" any)*  -- comment
            | multiLineComment
multiLineComment   = "|-" (~"-|" any)* "-|"

}
