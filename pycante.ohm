Pycante {
  Program = Statement* 
  Statement = Exp
            | Loop  -- while, for
            | FunDec  -- Emoji
            | Block
            | Assignment
            | FunCall
            | TypeInference
            | Conditional -- if, else if, else
            | VarDec  -- it uses let
            | Class      
            | Return
  Exp = Exp mulop Exp1
       | Exp1
  Exp1 = Exp1 addop Exp2
       | Exp2
  Exp2 = Exp2 "**" Exp3
       | Exp3
  Exp3 = Exp3 relop Exp4
       | Exp4 
  Exp4 = ((pluspluaop)? Number )
        | Boolean
        | (pluspluaop? (id))
        | ((id) pluspluaop?)
        | ((id) decrement?)
        | (decrement? (id))
        | "(" Exp ")"
        
  TypeInference = "what" "("(Exp)| (id) | (Type) ")"
  Assignment = id "=" Exp
  Block = "\n" "\t" ( (VarDec) | (Exp) | (Loop) | (Conditional) | (FunCall))
  Loop = For | While
  Conditional = IF
  For = "for" "(" VarDec ";" Exp relop Exp ";" ((Assignment) | (Exp)) ")"         
  While = "while" "(" ((Number) | (id) | (Exp)) relop ((Number) | (id) | (Exp)) ")" Block
  IF = "if" "("((Number) | (id) | (Exp)) relop ((Number) | (id) | (Exp)) ")" Block  -- Block + else if (optional) + (else) Optional
  Class = "class" id Block
  VarDec = "let" id "=" ((Number) | (Boolean) | (String) | (List))
  Return = "return" ((Exp)? | (id)? | (Types))
  FunDec = "üå∂Ô∏è" space+ id  "(" ( id ("," id)*) ")" "\n"
  Boolean = "true" | "false"
  List = "[" (Number ("," Number)*) "]" 
       | "[" (String ("," String)*) "]"
       | "[" (Boolean ("," Boolean)*) "]" 
  Number = digit+
  String = "\"" string | "\'")* "\""
  StringConcat = (String space+ pluspluaop space+ String)+
  keyword =  ("let" | "for" | "while" | "while"
              |  "return" | fireemoji | "if" | "else" | "else if" | "what"| "console.hot" | "true" | "false") ~idrest
  Types  =  "Boolean" | "Number" | "String" |
  space  := " "
  addop   = "+" | "-"
  pluspluaop = "++"
  decrementop = "--"
  negate = "-"
  mulop   = "*"| "%" | "/"
  relop   = "<=" | ">=" | ">" | "<" | "==" | "!="
  id = ~keyword letter idrest*
  idrest =  "_" | alnum
  chars = ("a".."z") | ("A".."Z") 
  special = space
  string = (digit) | (chars) | (special)  -- We need to figure out how to capture special characters like ">, <,@, # []" inside a string. 
  digit = "0..9"
}
